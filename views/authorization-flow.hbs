 <html>
<head>
    <meta charset="utf-8" />
    <title>Client-Credential-Flow</title>

    <style>
        .container {
            display: flex;
            flex-direction: column;
            flex-wrap: nowrap;

            margin: 3px;
            padding: 10px;
            border: 2px solid black;
            border-radius: 3px 2px;
        }
        .input-container {
            margin:3px;
            padding: 10px;
            border: 2px solid black;
            border-radius: 3px 2px;
        }
        .input-form {
            display: flex;
            flex-direction: column;
            flex-wrap: nowrap;
        }
        .input-group {
            display: inline-flex;
            padding: 10px;
        }
        .input-group > label {
            flex: 25%;
        }

        .input-group > input,
        .input-group > select,
        .input-group > .input-container,
        .input-group > textarea {
            flex: 75%;
        }
        .multi-input-group {
            display: inline-flex;
            padding: 10px;
        }
        .multi-input-group > label {
            flex: 15%;
        }

        .multi-input-group > input,
        .multi-input-group > select,
        .multi-input-group > textarea {
            flex: 35%;
            margin-right: 10px;
        }
        .button-group {
            display: inline-flex;
        }
        .reset-button,
        .submit-button {
            flex: 45%;
            padding: 5px;
            margin: 5px;
            color: #000;
            background-color: #e4e4e4;
            border: 2px solid #000;
            border-radius: 3px 2px;
        }
        .reset-button:hover,
        .reset-button:focus {
            color: #a11;
            border: 2px solid #a11;
        }

        .submit-button:hover,
        .submit-button:focus {
            color: #1a1;
            border: 2px solid #1a1;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="input-container">
        <h2>Client-Credential-Flow</h2>
        <a href="/api/discovery/issuer">Go back to Discovery</a>
        <p>Please enter the necessary information:</p>
        <form class="input-form">
            <div class="input-group">
                <label for="clientId"><b>Client-ID: </b></label>
                <input type="text" id="clientId" name="clientId" />
            </div>
            <div class="input-group">
                <label for="clientSecret"><b>Client-Secret: </b></label>
                <input type="password" id="clientSecret" name="clientSecret" />
            </div>
            <div class="input-group">
                <label for="redirectUri"><b>Redirect URI: </b></label>
                <input type="text" id="redirectUri" name="redirectUri" />
            </div>
            <button id="submit" onclick="login()" type="button"  value="submit" >Submit</button>
        </form>
    </div>
</div>
<script type="text/javascript">
    function login() {
        const authIssuer = "http://localhost:8080/realms/myrealm/protocol/openid-connect/auth";
        const client_id = document.getElementById("clientId").value;
        const client_secret = document.getElementById("clientSecret").value;
        const redirect_uri = document.getElementById("redirectUri").value;
        const responseType = "code";
        const state = randomString(10);

        let popUpWindow = authURL(authIssuer, client_id, client_secret, redirect_uri, responseType, state)
        let myURL = extractURL(popUpWindow);

        /*setTimeout(function () {
            console.log("myURL");
        }, 3000);

        const response = await fetch('callback', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                clientId: client_id,
                clientSecret: client_secret,
                url: myURL,
                redirectUri: redirect_uri,
            }),
            redirect: 'follow',
        })
        console.log(response);*/

        let interval = setInterval(() => {
            console.log('.....')
            if (!myURL.includes('blank')) {
                console.log('I am here in the interval')
                const response = fetch('callback', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                clientId: client_id,
                clientSecret: client_secret,
                url: myURL,
                redirectUri: redirect_uri,
            }),
            redirect: 'follow',
        })
        console.log(response);
                clearInterval(interval);
            } else {
                myURL = extractURL(popUpWindow);
                console.log("In else block")
            }
        }, 1000);
    }

    function extractURL(window) {
        return window.location.href;
    }
    // function checkUrl() {
    //     console.log("###################");
    //     console.log("Hello Login");
    //     extractURL();
    //     /*
    //     Pop up window getting loaded a little late, because of this the url fetches about:blank which causes error, this can be fixed by fetching the URL after the popup load is successful
    //     The below code needs to run oly after the above popUpWindow is completely loaded*/
    //
    // }
    // function loadPopUpWindow(authIssuer, client_id, client_secret, redirect_uri, responseType, state) {
    //     return new Promise(async (resolve, reject) => {
    //         let popupWindow = await authURL(authIssuer, client_id, client_secret, redirect_uri, responseType, state);
    //         // let popupWindow = window.open(authURL(authIssuer, client_id, client_secret, response_type, redirect_uri, state),
    //         //         'popUpWindow', 'height=300,width=700,left=50,top=50,resizable=yes,' +
    //         //         'scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no, status=yes');
    //         resolve(popupWindow);
    //     });
    // }
    // async function extractURL() {
    //     console.log('Before promise call.')
    //     //3. Await for the first function to complete
    //     const result = await loadPopUpWindow(authIssuer, client_id, client_secret, redirect_uri, responseType, state);
    //     console.log('Promise resolved: ');
    //     console.log('Next step.')
    //     let myURL = result.location.href;
    //
    //     let myParameters = myURL.split("?")[1]
    //     console.log(myParameters);
    //     myParameters = JSON.parse('{"' + myParameters.replace(/&/g, '","').replace(/=/g, '":"') + '"}', function (key, value) {
    //         return key === "" ? value : decodeURIComponent(value)
    //     });
    //
    //     console.log(myParameters);
    //
    //     let data = {
    //         clientId: client_id,
    //         clientSecret: client_secret,
    //         code: myParameters.code,
    //         redirectUri: redirect_uri,
    //     };
    //
    //     fetch("/api/flows/auth", {
    //         method: "POST",
    //         headers: {'Content-Type': 'application/json'},
    //         body: JSON.stringify(data)
    //     }).then(res => {
    //         console.log("Request complete! response:", res);
    //     });
    //
    // };

    function authURL(authIssuer, clientId, clientSecret, redirectUri, responseType, state) {
        return window.open(authIssuer +
                '?client_id=' +
                clientId +
                '&client_secret=' +
                clientSecret +
                '&response_type=' +
                responseType +
                '&redirect_uri=' +
                redirectUri +
                '&state=' +
                state +
                '&prompt=consent&scope=openid');
    }

    function randomString(length) {
        let chars = '0123456789abcdefghijklmnopqrstuvwxyz';
        let result = '';
        for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
        return result;
    }
</script>
</body>
</html>